@page "/ticTacToe"
@using MaxsGameCorner.Components
@inject MaxsGameCorner.Shared.TicGameState State
@inject IJSRuntime JSRuntime

<h1 class='ticTacToe'>Tic Tac Toe</h1>

@if (!string.IsNullOrWhiteSpace(winnerMessage))
{
    <div class="winner">
        <span>@winnerMessage</span>
    </div>
}

@if (!string.IsNullOrWhiteSpace(winner) || clickedBoxes == 9)
{
    <button class='reset-game' @onclick='ResetGame'>Reset Game</button>
}


<div class="board-row">
    <Square sqareValue=@values[0] OnClickCallback='() => HandleClick(0)' />
    <Square sqareValue=@values[1] OnClickCallback='() => HandleClick(1)' />
    <Square sqareValue=@values[2] OnClickCallback='() => HandleClick(2)' />
</div>
<div class="board-row">
    <Square sqareValue=@values[3] OnClickCallback='() => HandleClick(3)' />
    <Square sqareValue=@values[4] OnClickCallback='() => HandleClick(4)' />
    <Square sqareValue=@values[5] OnClickCallback='() => HandleClick(5)' />
</div>
<div class="board-row">
    <Square sqareValue=@values[6] OnClickCallback='() => HandleClick(6)' />
    <Square sqareValue=@values[7] OnClickCallback='() => HandleClick(7)' />
    <Square sqareValue=@values[8] OnClickCallback='() => HandleClick(8)' />
</div>

<div class='rules'>

    <h2 class='howToPlay'>How To Play</h2>
    <ul>
        <li>
            <p>The game is played on a grid that's 3 squares by 3 squares. </p>
        </li>
        <li>
            <p>You are X , your friend is O . Players take turns putting their marks in empty squares.</p>
        </li>
        <li>
            <p>The first player to get 3 of her marks in a row (up, down, across, or diagonally) is the winner.</p>
        </li>
        <li>
            <p>When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.
            </p>
        </li>
    </ul>
</div>

@code {

    public bool isXNext = true;

    public string winner = "";

    public string winnerMessage = "";

    public int clickedBoxes = 0;


    public string[] values = new string[9] { "", "", "", "", "", "", "", "", "" };
    private async void HandleClick(int index)
    {
        if (!string.IsNullOrWhiteSpace(State.CalculateWinner(values)) || !string.IsNullOrWhiteSpace(values[index]))
        {
            return;
        }
        if (isXNext)
        {
            values[index] = "X";
            await PlaySound("sounds/click.mp3");
        }
        else
        {
            values[index] = "O";
            await PlaySound("sounds/clonk.mp3");
        }
        isXNext = !isXNext;

        checkForWinner();
    }

    private async void checkForWinner()
    {
        winner = State.CalculateWinner(values);
        if (!string.IsNullOrEmpty(winner))
        {
            winnerMessage = "Winner: " + winner;
            await PlaySound("sounds/win.wav");
        }
        else
        {
            clickedBoxes = 0;
            foreach (var value in values)
            {
                if (!string.IsNullOrWhiteSpace(value))
                {
                    clickedBoxes++;
                }
            }
            if (clickedBoxes == 9)
            {
                winnerMessage = "It's a tie!";
            }
            else
            {
                winnerMessage = "Next player: " + (isXNext ? "O" : "X");
            }

        }
    }

    private async Task PlaySound(string location)
    {
        await JSRuntime.InvokeVoidAsync("playAudio", location);
        StateHasChanged();
    }

    private void ResetGame()
    {
        isXNext = true;
        winner = "";
        winnerMessage = "";
        clickedBoxes = 0;
        values = new string[9] { "", "", "", "", "", "", "", "", "" };
    }
}