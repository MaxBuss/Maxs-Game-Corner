@page "/simonSays"
@inject IJSRuntime JSRuntime

<h1>Simon Say's</h1>

<div class='simom-says'>
    <button class='btn btn-primary' @onclick='StartGame'>Start Game</button>
    <div class='high-score'>High Score: @highScore</div>
    <div class='high-score'>Current Score: @score</div>
    <div class='simon-says__game'>
        @foreach (var color in colors)
        {
            <button class="btn simon @color  @(IsLit[colors.IndexOf(color)] ? "lit" : "")"
                @onclick="() => { TryPress(color); }" disabled='@gameOver'></button>
        }
    </div>
    @if (gameOver)
    {
        <div class='game-over'>Game Over, click Start Game to start again.</div>
    }
</div>

<div class='rules'>

    <h2 class='howToPlay'>How To Play</h2>
    <ul>
        <li>
            <p>To Begin the game Press Start Game </p>
        </li>
        <li>
            <p>Once the game has started, four buttons will light up in a specific order.</p>
        </li>
        <li>
            <p>The player must slect the same buttons in the same exact order displayed to score points.</p>
        </li>
        <li>
            <p>Once all four colors in the sequence have been hit, the game will play another set of four colors for you
                to continue playing.
            </p>
        </li>
        <li>
            <p>The game will end if the player selects the wrong color in the sequence.
            </p>
        </li>
    </ul>
</div>

@code {

    Random random = new Random();
    private List<string> colors = new List<string> { "red", "blue", "green", "yellow" };
    private bool[] IsLit = new bool[4];

    private string[] simonSays = new string[4];

    private int highScore = 0;

    private int index = 0;

    private int score = 0;

    private bool gameOver = false;

    private void StartGame()
    {
        index = 0;
        gameOver = false;
        IsLit[0] = false;
        IsLit[1] = false;
        IsLit[2] = false;
        IsLit[3] = false;
        for (int i = 0; i < simonSays.Length; i++)
        {
            simonSays[i] = colors[random.Next(0, 4)];
        }
        PlaySimonPattern();
    }

    private async void PlaySimonPattern()
    {
        foreach (var color in simonSays)
        {
            IsLit[colors.IndexOf(color)] = true;
            StateHasChanged();
            await PlaySound("sounds/" + color + ".mp3");
            await Task.Delay(500);
            IsLit[colors.IndexOf(color)] = false;
            StateHasChanged();
            await Task.Delay(100);

        }
    }

    private async void TryPress(string color)
    {
        IsLit[colors.IndexOf(color)] = true;
        await PlaySound("sounds/" + color + ".mp3");
        StateHasChanged();
        await Task.Delay(250);
        IsLit[colors.IndexOf(color)] = false;
        StateHasChanged();
        if (simonSays[index] == color)
        {
            score++;
            if (score > highScore)
            {
                highScore = score;
            }
            index++;
            StateHasChanged();
            if (index == 4)
            {
                await Task.Delay(250);
                StartGame();
            }
        }
        else
        {
            score = 0;
            gameOver = true;
            index = 0;
            StateHasChanged();
        }
    }
    private async Task PlaySound(string location)
    {
        await JSRuntime.InvokeVoidAsync("playAudio", location);
        StateHasChanged();
    }
}