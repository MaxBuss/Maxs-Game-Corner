@page "/connectFour"
@inject MaxsGameCorner.Shared.GameState State
@using System.Drawing
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<BlackJack> Strings

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<h1 class='connectFour'>@Strings["Connect Four"]</h1>

<nav>
    <span title="Click to play a piece" @onclick="() => PlayPiece(0)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(1)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(2)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(3)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(4)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(5)">ðŸ”½</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(6)">ðŸ”½</span>
</nav>

<article>
    @WinnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@ErrorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
        @for (var i = 0; i < 42; i++)
        {
            <span class="@Pieces[i]"></span>
        }
    </div>
</div>

<div class='rules'>

    <h2 class='howToPlay'>How To Play</h2>
    <ul>
        <li>
            <p>Connect Four is a 2-player game. Players alternate taking turns. Each side of the Connect Four board has
                its
                own
                color of checkers. There is one color for each player. </p>
        </li>
        <li>
            <p>The goal of Connect Four is to get 4 of your color checkers in a rowâ€”horizontally, vertically, or
                diagonallyâ€”before your opponent does! </p>
        </li>
        <li>
            <p>When it is your turn, click 1 of the arrows at the top of the Connect Four board.
                This
                allows you to either build your row or stop your opponent from getting 4 in a row. After you drop your
                checker,
                itâ€™s your opponentâ€™s turn. </p>
        </li>
        <li>
            <p>The game is over when one player gets 4 checkers in a row, or when all slots are filled, meaning the game
                ends in
                a stalemate. </p>
        </li>
    </ul>
</div>

@code {

    private string[] Pieces = new string[42];

    private string WinnerMessage = string.Empty;

    private string ErrorMessage = string.Empty;

    private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

    private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";

    private async void PlayPiece(byte col)
    {
        ErrorMessage = string.Empty;

        try
        {
            var landingRow = State.PlayPiece(col);
            var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
            Pieces[State.CurrentTurn - 1] = cssClass;
            if (State.PlayerTurn == 1)
            {
                await PlaySound("sounds/click.mp3");
            }
            else
            {
                await PlaySound("sounds/clonk.mp3");
            }
        }
        catch (ArgumentException ex)
        {
            ErrorMessage = ex.Message;
        }
        WinnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
        if (WinnerMessage == "Player 1 Wins!")
        {
            await PlaySound("sounds/win.wav");
        }
        else if (WinnerMessage == "Player 2 Wins!")
        {
            await PlaySound("sounds/lose.wav");
        }
    }

    private async Task PlaySound(string location)
    {
        await JSRuntime.InvokeVoidAsync("playAudio", location);
        StateHasChanged();
    }

    [Parameter()]
    public Color BoardColor { get; set; }
    = ColorTranslator.FromHtml("yellow");

    [Parameter()]
    public Color Player1Color { get; set; }
    = ColorTranslator.FromHtml("red");

    [Parameter()]
    public Color Player2Color { get; set; }
    = ColorTranslator.FromHtml("blue");
    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    void ResetGame()
    {
        State.ResetBoard();
        WinnerMessage = string.Empty;
        ErrorMessage = string.Empty;
        Pieces = new string[42];
    }
}